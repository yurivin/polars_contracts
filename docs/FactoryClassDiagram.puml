@startuml

SuiteList <|-- SuiteOwner
class SuiteList {
    +address[] _suites
    +ISuiteFactory _suiteFactory
    +mapping(address suite => uint256 index) _suiteIndexes
    +mapping(address suite => address owner) _suiteOwners
    modifier onlySuiteFactoryOrOwner
    modifier modifierOwnerOrSuiteOwner(address suiteAddress)
    +void addSuite(address suiteAddress, address suiteOwner) onlySuiteFactoryOrOwner
    +void deleteSuite(address suiteAddress) onlySuiteOwner(suiteAddress), onlyOwner
    +address[] getSuitePage(uint256 startIndex, uint256 count)
    +void setSuiteFactory(address factoryAddress) onlyOwner
    +void changeSuiteOwner(address suiteAddress, address candidateAddress) onlySuiteOwner(suiteAddress)
    +boolean isSuiteOwner(address suiteAddress, address candidateAddress)
}

SuiteFactory <|-- Ownable
class SuiteFactory {
    +ISuiteList _suiteList
    +address deploySuite()
    +void setSuiteList(address suiteList) onlyOwner
}

Suite <|-- Ownable
class Suite {
    +IWhiteList _whiteList
    modifier onlyWhiteList
    +mapping(uint256 type => address) contracts
    +void addContract(uint256 type, address contract) onlyWhiteList
}

WhiteList <|-- Ownable
class WhiteList {
    +mapping(address factory => boolean) _whiteList
    +void add(address factory) onlyOwner
    +void remove(address factory) onlyOwner
}

PredictionCollateralFactory <|-- ContractType
PredictionCollateralFactory <|-- SuiteOwner
class PredictionCollateralFactory {
    +ISuiteList _suiteList
    +void createPredictionCollateral(address suite, predictionCollateralParams...) onlySuiteOwner(suiteAddress)
}

PredictionPoolFactory <|-- ContractType
PredictionPoolFactory <|-- SuiteOwner
class PredictionPoolFactory {
    +ISuiteList _suiteList
    +void createPredictionCollateral(address (suiteAddress), predictionCollateralParams...) onlySuiteOwner(suiteAddress)
}

EventLifeCycleFactory <|-- ContractType
EventLifeCycleFactory <|-- SuiteOwner
class EventLifeCycleFactory {
    +ISuiteList _suiteList
    +void createEventLifeCycle(address (suiteAddress), predictionCollateralParams...) onlySuiteOwner(suiteAddress)
}

class ContractType {
    +uint256 _contractType
    +uint256 _getContractType()
}

SuiteOwner <|-- Ownable
/'All functions like Ownable exclude create/change suite owner and with "suite" prefix, but with
 suiteOwner logic, where we are checking ownership in SuiteList'/
class SuiteOwner {
    ISuiteList _suiteList
    modifier onlySuiteOwner(address suiteAddress)
    +void setSuiteList(address suiteList) onlyOwner
}

class Ownable {
    Standard Ownable from OpenZeppellin
}

@enduml

